/**
 * 
 * Copyright 2007-2010 by Nils Reiter.
 * 
 * This FrameNet API is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This FrameNet API is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this FrameNet API.  If not, see www.gnu.org/licenses/gpl.html.
 * 
 */
package de.saar.coli.salsa.reiter.framenet.flatformat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

import de.saar.coli.salsa.reiter.framenet.CorpusReader;
import de.saar.coli.salsa.reiter.framenet.FrameElementNotFoundException;
import de.saar.coli.salsa.reiter.framenet.FrameNet;
import de.saar.coli.salsa.reiter.framenet.FrameNotFoundException;
import de.saar.coli.salsa.reiter.framenet.IToken;
import de.saar.coli.salsa.reiter.framenet.ParsingException;
import de.saar.coli.salsa.reiter.framenet.RealizedFrame;

/**
 * This class parses a very simple format for FrameNet annotated text, that can
 * easily be generated by scripting languages.
 * 
 * The annotation is stored line-by-line. Each line starts with one of the three
 * tags: text, frame or fe. An annotated sentence usually starts with a
 * text-line:
 * 
 * <blockquote>
 * <code>text The parishioners of St. Michael and All Angels stop to chat at the church door , as members here always have .</code>
 * </blockquote>
 * 
 * The following lines specify frames and frame elements for this text:
 * 
 * <blockquote><code>frame People_by_jurisdiction parishioners<br>
 * fe Jurisdiction of St. Michael and All Angels<br>
 * fe Person parishioners</code></blockquote>
 * 
 * The frame elements are associated with the preceeding frame, it is therefore
 * possible to specify more than one frame annotation for one text.
 * 
 * <blockquote><code>frame Buildings church<br>
 * fe Building church</code></blockquote>
 * 
 * is an annotation for the text shown above.
 * 
 * @author Nils Reiter
 * 
 * @version 0.3
 * 
 */
public class FlatFormat extends CorpusReader {

	/**
	 * Creates the FlatFormat object and processes the file.
	 * 
	 * @param frameNet
	 *            The FrameNet object.
	 */
	public FlatFormat(final FrameNet frameNet, final Logger logger) {
		super(frameNet, logger);
	}

	/**
	 * This method parses the given file and stores the found annotation
	 * sentence-wise in the object.
	 * 
	 */
	@Override
	public void parse(final File file) throws FileNotFoundException,
			ParsingException, FrameNotFoundException,
			FrameElementNotFoundException {
		BufferedReader br = null;

		if (!file.exists() || !file.canRead()) {
			this.getLogger().severe(
					"FlatFormat.process(): cannot read " + file.getName());
		} else {
			try {
				br = new BufferedReader(new FileReader(file));
				String line = "";
				String text = "";
				int sentenceId = 0;
				RealizedFrame current = null;
				Sentence currentSentence = null;
				String[] token = { "" };
				List<String> tokens = new LinkedList<String>();
				do {

					if (br.ready()) {
						line = br.readLine();
						// s += line;

						token = line.split(" ");
						tokens = new LinkedList<String>();
						for (String word : token) {
							tokens.add(word);
						}
						if (token[0].equals("frame")) {
							// System.out.print(".");
							if (current != null) {
								currentSentence.addRealizedFrame(current);
							}
							try {
								IToken tok =
										currentSentence.getTokenForString(join(
												' ', tokens.subList(2,
														tokens.size())));
								if (tok != null) {
									current =
											getFrameNet().getFrame(token[1])
													.realize(tok);
								}
							} catch (FrameNotFoundException e) {
								this.getLogger().warning(e.getMessage());
								current = null;
							}
						}
						if (token[0].equals("fe") && current != null) {
							try {
								IToken tok =
										currentSentence.getTokenForString(join(
												' ', tokens.subList(2,
														tokens.size())));
								if (tok != null) {
									current.addRealizedFrameElement(token[1],
											tok);
								}
							} catch (FrameElementNotFoundException e) {
								this.getLogger().warning(e.getMessage());
								if (this.isAbortOnError()) {
									throw new FrameElementNotFoundException(
											e.getFrame(), e.getFrameElement());
								}
							}
						}
						if (token[0].equals("text")) {
							if (currentSentence != null) {
								this.getSentences().add(currentSentence);
								this.getSentenceIndex().put(
										currentSentence.getIdString(),
										currentSentence);
							}
							text = join(' ', tokens.subList(1, tokens.size()));
							currentSentence = new Sentence(sentenceId++, text);
						}
					}
				} while (/* line.matches("^.*[a-zA-Z0-9_].*$") && */br.ready());
				if (current != null) {
					currentSentence.addRealizedFrame(current);
				}
				if (currentSentence != null) {
					this.getSentences().add(currentSentence);
					this.getSentenceIndex().put(currentSentence.getIdString(),
							currentSentence);
				}
				text = join(' ', tokens.subList(1, tokens.size()));
				currentSentence = new Sentence(sentenceId++, text);

				// System.out.println("");
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					br.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	private String join(final char c, final Collection<String> a) {
		String ret = "";
		boolean first = true;
		for (String s : a) {
			if (first) {
				ret += s;
				first = false;
			} else {
				ret += String.valueOf(c) + s;
			}
		}
		return ret;
	}
}
